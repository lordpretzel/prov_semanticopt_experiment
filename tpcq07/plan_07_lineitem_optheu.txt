Timing is on.
                                                                                                                                                                             QUERY PLAN                                                                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=285486.99..285487.04 rows=1 width=125)
   ->  Sort  (cost=285486.99..285487.00 rows=1 width=125)
         Sort Key: f0.l_orderkey, f0.l_partkey, f0.l_suppkey, f0.l_linenumber, f0.l_quantity, f0.l_extendedprice, f0.l_discount, f0.l_tax, f0.l_returnflag, f0.l_linestatus, f0.l_shipdate, f0.l_commitdate, f0.l_receiptdate, f0.l_shipinstruct, f0.l_shipmode, f0.l_comment
         ->  Gather  (cost=230421.09..285486.98 rows=1 width=125)
               Workers Planned: 2
               ->  Parallel Hash Join  (cost=229421.09..284486.88 rows=1 width=125)
                     Hash Cond: (((f0_10.n_name)::text = (f0_4.n_name)::text) AND ((f0_11.n_name)::text = (f0_5.n_name)::text) AND (date_part('year'::text, (f0_7.l_shipdate)::timestamp without time zone) = f0_12."A2") AND ((f0_7.l_extendedprice * ('1'::double precision - f0_7.l_discount)) = (f0.l_extendedprice * ('1'::double precision - f0.l_discount))))
                     ->  Parallel Hash Join  (cost=5346.09..60355.63 rows=2500 width=100)
                           Hash Cond: ((f0_8.o_custkey = f0_9.c_custkey) AND (f0_11.n_nationkey = f0_9.c_nationkey))
                           ->  Nested Loop  (cost=10.59..54691.93 rows=62513 width=116)
                                 ->  Nested Loop  (cost=10.16..22514.34 rows=62513 width=116)
                                       ->  Nested Loop  (cost=9.73..54.14 rows=333 width=96)
                                             ->  Nested Loop  (cost=1.87..3.57 rows=1 width=96)
                                                   Join Filter: (('GERMANY'::text) = (f0_11.n_name)::text)
                                                   ->  Merge Join  (cost=1.87..2.01 rows=1 width=80)
                                                         Merge Cond: (('FRANCE'::text) = (f0_10.n_name)::text)
                                                         ->  Sort  (cost=0.04..0.04 rows=1 width=64)
                                                               Sort Key: ('FRANCE'::text)
                                                               ->  Parallel Append  (cost=0.00..0.03 rows=1 width=64)
                                                                     ->  Result  (cost=0.00..0.01 rows=1 width=64)
                                                                     ->  Result  (cost=0.00..0.01 rows=1 width=64)
                                                         ->  Sort  (cost=1.83..1.89 rows=25 width=16)
                                                               Sort Key: f0_10.n_name
                                                               ->  Seq Scan on nation f0_10  (cost=0.00..1.25 rows=25 width=16)
                                                   ->  Seq Scan on nation f0_11  (cost=0.00..1.25 rows=25 width=16)
                                             ->  Bitmap Heap Scan on supplier f0_6  (cost=7.87..46.57 rows=400 width=16)
                                                   Recheck Cond: (s_nationkey = f0_10.n_nationkey)
                                                   ->  Bitmap Index Scan on fkey_10  (cost=0.00..7.77 rows=400 width=0)
                                                         Index Cond: (s_nationkey = f0_10.n_nationkey)
                                       ->  Index Scan using fkey_5 on lineitem f0_7  (cost=0.43..65.57 rows=188 width=36)
                                             Index Cond: (l_suppkey = f0_6.s_suppkey)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Index Scan using orders_pkey on orders f0_8  (cost=0.43..0.51 rows=1 width=16)
                                       Index Cond: (o_orderkey = f0_7.l_orderkey)
                           ->  Parallel Hash  (cost=4398.00..4398.00 rows=62500 width=16)
                                 ->  Parallel Seq Scan on customer f0_9  (cost=0.00..4398.00 rows=62500 width=16)
                     ->  Parallel Hash  (cost=224074.88..224074.88 rows=6 width=164)
                           ->  Hash Join  (cost=48276.90..224074.88 rows=6 width=164)
                                 Hash Cond: (((f0_4.n_name)::text = (f0_12."A0")::text) AND ((f0_5.n_name)::text = (f0_12."A1")::text) AND (date_part('year'::text, (f0.l_shipdate)::timestamp without time zone) = f0_12."A2"))
                                 ->  Hash Join  (cost=48275.88..213329.32 rows=781416 width=141)
                                       Hash Cond: (f0_3.c_nationkey = f0_5.n_nationkey)
                                       ->  Hash Join  (cost=48274.31..210928.81 rows=781416 width=141)
                                             Hash Cond: (f0_2.s_nationkey = f0_4.n_nationkey)
                                             ->  Parallel Hash Join  (cost=48272.75..208528.29 rows=781416 width=141)
                                                   Hash Cond: (f0_1.o_custkey = f0_3.c_custkey)
                                                   ->  Hash Join  (cost=43093.50..201297.77 rows=781416 width=141)
                                                         Hash Cond: (f0.l_suppkey = f0_2.s_suppkey)
                                                         ->  Parallel Hash Join  (cost=42641.50..198793.68 rows=781416 width=133)
                                                               Hash Cond: (f0.l_orderkey = f0_1.o_orderkey)
                                                               ->  Parallel Seq Scan on lineitem f0  (cost=0.00..154100.96 rows=781416 width=125)
                                                                     Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                                               ->  Parallel Hash  (cost=34829.00..34829.00 rows=625000 width=16)
                                                                     ->  Parallel Seq Scan on orders f0_1  (cost=0.00..34829.00 rows=625000 width=16)
                                                         ->  Hash  (cost=327.00..327.00 rows=10000 width=16)
                                                               ->  Seq Scan on supplier f0_2  (cost=0.00..327.00 rows=10000 width=16)
                                                   ->  Parallel Hash  (cost=4398.00..4398.00 rows=62500 width=16)
                                                         ->  Parallel Seq Scan on customer f0_3  (cost=0.00..4398.00 rows=62500 width=16)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                                   ->  Seq Scan on nation f0_4  (cost=0.00..1.25 rows=25 width=16)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                             ->  Seq Scan on nation f0_5  (cost=0.00..1.25 rows=25 width=16)
                                 ->  Hash  (cost=1.01..1.01 rows=1 width=23)
                                       ->  Seq Scan on rtpcq07 f0_12  (cost=0.00..1.01 rows=1 width=23)
(63 rows)

Time: 12.329 ms