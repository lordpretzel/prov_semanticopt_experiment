Timing is on.
                                                                                                                                                                   QUERY PLAN                                                                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=62668.85..62668.88 rows=1 width=112)
   ->  Sort  (cost=62668.85..62668.86 rows=1 width=112)
         Sort Key: f0.o_orderkey, f0.o_custkey, f0.o_orderstatus, f0.o_totalprice, f0.o_orderdate, f0.o_orderpriority, f0.o_clerk, f0.o_shippriority, f0.o_comment
         ->  Nested Loop  (cost=62368.01..62668.84 rows=1 width=112)
               Join Filter: (f0_4.n_nationkey = f0_2.c_nationkey)
               ->  Nested Loop  (cost=62367.59..62668.38 rows=1 width=120)
                     ->  Nested Loop  (cost=62367.16..62667.87 rows=1 width=16)
                           Join Filter: (((date_part('year'::text, (f0_8.l_shipdate)::timestamp without time zone)) = date_part('year'::text, (f0_1.l_shipdate)::timestamp without time zone)) AND (((f0_8.l_extendedprice * ('1'::double precision - f0_8.l_discount))) = (f0_1.l_extendedprice * ('1'::double precision - f0_1.l_discount))))
                           ->  Nested Loop  (cost=62366.73..62597.60 rows=1 width=40)
                                 ->  Nested Loop  (cost=62358.87..62547.03 rows=1 width=40)
                                       Join Filter: (((f0_6."A0")::text = (f0_5.n_name)::text) AND ((f0_4.n_name)::text = (f0_12.n_name)::text) AND (f0_6."A2" = (date_part('year'::text, (f0_8.l_shipdate)::timestamp without time zone))))
                                       ->  Nested Loop  (cost=0.14..13.90 rows=1 width=39)
                                             Join Filter: ((f0_4.n_name)::text = (f0_6."A1")::text)
                                             ->  Index Scan using nation_pkey on nation f0_4  (cost=0.14..12.51 rows=25 width=16)
                                             ->  Materialize  (cost=0.00..1.01 rows=1 width=23)
                                                   ->  Seq Scan on rtpcq07 f0_6  (cost=0.00..1.01 rows=1 width=23)
                                       ->  Merge Join  (cost=62358.73..62520.00 rows=750 width=48)
                                             Merge Cond: ((f0_11.n_name)::text = (f0_5.n_name)::text)
                                             ->  Unique  (cost=62356.90..62431.91 rows=6001 width=32)
                                                   ->  Sort  (cost=62356.90..62371.90 rows=6001 width=32)
                                                         Sort Key: f0_11.n_name, f0_12.n_name, (date_part('year'::text, (f0_8.l_shipdate)::timestamp without time zone)), ((f0_8.l_extendedprice * ('1'::double precision - f0_8.l_discount)))
                                                         ->  Gather  (cost=6344.23..61980.31 rows=6001 width=32)
                                                               Workers Planned: 2
                                                               ->  Parallel Hash Join  (cost=5344.23..60380.21 rows=2500 width=32)
                                                                     Hash Cond: ((f0_9.o_custkey = f0_10.c_custkey) AND (f0_12.n_nationkey = f0_10.c_nationkey))
                                                                     ->  Nested Loop  (cost=8.72..54691.51 rows=62513 width=52)
                                                                           ->  Nested Loop  (cost=8.30..22513.92 rows=62513 width=52)
                                                                                 ->  Nested Loop  (cost=7.87..53.72 rows=333 width=32)
                                                                                       ->  Nested Loop  (cost=0.00..3.15 rows=1 width=32)
                                                                                             Join Filter: (('GERMANY'::text) = (f0_12.n_name)::text)
                                                                                             ->  Nested Loop  (cost=0.00..1.59 rows=1 width=48)
                                                                                                   Join Filter: ((f0_11.n_name)::text = ('FRANCE'::text))
                                                                                                   ->  Parallel Append  (cost=0.00..0.03 rows=1 width=64)
                                                                                                         ->  Result  (cost=0.00..0.01 rows=1 width=64)
                                                                                                         ->  Result  (cost=0.00..0.01 rows=1 width=64)
                                                                                                   ->  Seq Scan on nation f0_11  (cost=0.00..1.25 rows=25 width=16)
                                                                                             ->  Seq Scan on nation f0_12  (cost=0.00..1.25 rows=25 width=16)
                                                                                       ->  Bitmap Heap Scan on supplier f0_7  (cost=7.87..46.57 rows=400 width=16)
                                                                                             Recheck Cond: (s_nationkey = f0_11.n_nationkey)
                                                                                             ->  Bitmap Index Scan on fkey_10  (cost=0.00..7.77 rows=400 width=0)
                                                                                                   Index Cond: (s_nationkey = f0_11.n_nationkey)
                                                                                 ->  Index Scan using fkey_5 on lineitem f0_8  (cost=0.43..65.57 rows=188 width=36)
                                                                                       Index Cond: (l_suppkey = f0_7.s_suppkey)
                                                                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                                                           ->  Index Scan using orders_pkey on orders f0_9  (cost=0.43..0.51 rows=1 width=16)
                                                                                 Index Cond: (o_orderkey = f0_8.l_orderkey)
                                                                     ->  Parallel Hash  (cost=4398.00..4398.00 rows=62500 width=16)
                                                                           ->  Parallel Seq Scan on customer f0_10  (cost=0.00..4398.00 rows=62500 width=16)
                                             ->  Sort  (cost=1.83..1.89 rows=25 width=16)
                                                   Sort Key: f0_5.n_name
                                                   ->  Seq Scan on nation f0_5  (cost=0.00..1.25 rows=25 width=16)
                                 ->  Bitmap Heap Scan on supplier f0_3  (cost=7.87..46.57 rows=400 width=16)
                                       Recheck Cond: (s_nationkey = f0_5.n_nationkey)
                                       ->  Bitmap Index Scan on fkey_10  (cost=0.00..7.77 rows=400 width=0)
                                             Index Cond: (s_nationkey = f0_5.n_nationkey)
                           ->  Index Scan using fkey_5 on lineitem f0_1  (cost=0.43..65.57 rows=188 width=36)
                                 Index Cond: (l_suppkey = f0_3.s_suppkey)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Index Scan using orders_pkey on orders f0  (cost=0.43..0.51 rows=1 width=112)
                           Index Cond: (o_orderkey = f0_1.l_orderkey)
               ->  Index Scan using customer_pkey on customer f0_2  (cost=0.42..0.45 rows=1 width=16)
                     Index Cond: (c_custkey = f0.o_custkey)
(62 rows)

Time: 25.863 ms