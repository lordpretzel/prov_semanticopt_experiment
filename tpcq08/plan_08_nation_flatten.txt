Timing is on.
                                                                                                                                  QUERY PLAN                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=234838.72..234838.74 rows=2 width=406)
   CTE _temp_view_0
     ->  Unique  (cost=156312.91..156522.82 rows=480 width=123)
           ->  Merge Append  (cost=156312.91..156438.85 rows=4798 width=123)
                 Sort Key: f0_2.s_nationkey, f0_3.n_name, f0_3.n_regionkey, f0_3.n_comment, (date_part('YEAR'::text, (f0_7.o_orderdate)::timestamp without time zone)), ((f0_8.l_extendedprice * ('1'::double precision - f0_8.l_discount))), f0_3.n_name
                 ->  Sort  (cost=78256.78..78262.77 rows=2399 width=123)
                       Sort Key: f0_2.s_nationkey, f0_3.n_name, f0_3.n_regionkey, f0_3.n_comment, (date_part('YEAR'::text, (f0_7.o_orderdate)::timestamp without time zone)), ((f0_8.l_extendedprice * ('1'::double precision - f0_8.l_discount))), f0_3.n_name
                       ->  Unique  (cost=78056.12..78098.10 rows=2399 width=123)
                             ->  Sort  (cost=78056.12..78062.12 rows=2399 width=123)
                                   Sort Key: f0_2.s_nationkey, f0_3.n_name, f0_3.n_regionkey, f0_3.n_comment, (date_part('YEAR'::text, (f0_7.o_orderdate)::timestamp without time zone)), ((f0_8.l_extendedprice * ('1'::double precision - f0_8.l_discount)))
                                   ->  Gather  (cost=1005.64..77921.44 rows=2399 width=123)
                                         Workers Planned: 2
                                         ->  Hash Join  (cost=5.64..76681.54 rows=1000 width=123)
                                               Hash Cond: (f0_2.s_nationkey = f0_3.n_nationkey)
                                               ->  Nested Loop  (cost=4.07..76666.91 rows=1000 width=28)
                                                     ->  Hash Join  (cost=3.79..76364.23 rows=1000 width=28)
                                                           Hash Cond: (f0_4.c_nationkey = f0_5.n_nationkey)
                                                           ->  Nested Loop  (cost=1.28..76332.98 rows=4999 width=36)
                                                                 ->  Nested Loop  (cost=0.86..73960.80 rows=4999 width=36)
                                                                       ->  Nested Loop  (cost=0.43..66139.42 rows=16578 width=32)
                                                                             ->  Parallel Seq Scan on part f0_9  (cost=0.00..5116.67 rows=552 width=8)
                                                                                   Filter: ((p_type)::text = 'ECONOMY ANODIZED STEEL'::text)
                                                                             ->  Index Scan using fkey_4 on lineitem f0_8  (cost=0.43..110.24 rows=31 width=40)
                                                                                   Index Cond: (l_partkey = f0_9.p_partkey)
                                                                       ->  Index Scan using orders_pkey on orders f0_7  (cost=0.43..0.47 rows=1 width=20)
                                                                             Index Cond: (o_orderkey = f0_8.l_orderkey)
                                                                             Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate < '1996-12-31'::date))
                                                                 ->  Index Scan using customer_pkey on customer f0_4  (cost=0.42..0.47 rows=1 width=16)
                                                                       Index Cond: (c_custkey = f0_7.o_custkey)
                                                           ->  Hash  (cost=2.45..2.45 rows=5 width=8)
                                                                 ->  Hash Join  (cost=1.07..2.45 rows=5 width=8)
                                                                       Hash Cond: (f0_5.n_regionkey = f0_6.r_regionkey)
                                                                       ->  Seq Scan on nation f0_5  (cost=0.00..1.25 rows=25 width=16)
                                                                       ->  Hash  (cost=1.06..1.06 rows=1 width=8)
                                                                             ->  Seq Scan on region f0_6  (cost=0.00..1.06 rows=1 width=8)
                                                                                   Filter: ((r_name)::text = 'AMERICA'::text)
                                                     ->  Index Scan using supplier_pkey on supplier f0_2  (cost=0.29..0.30 rows=1 width=16)
                                                           Index Cond: (s_suppkey = f0_8.l_suppkey)
                                               ->  Hash  (cost=1.25..1.25 rows=25 width=99)
                                                     ->  Seq Scan on nation f0_3  (cost=0.00..1.25 rows=25 width=99)
                 ->  Unique  (cost=78056.12..78104.10 rows=2399 width=123)
                       ->  Sort  (cost=78056.12..78062.12 rows=2399 width=123)
                             Sort Key: f0_12.c_nationkey, f0_13.n_name, f0_13.n_regionkey, f0_13.n_comment, (date_part('YEAR'::text, (f0_15.o_orderdate)::timestamp without time zone)), ((f0_16.l_extendedprice * ('1'::double precision - f0_16.l_discount))), f0_11.n_name
                             ->  Gather  (cost=1005.64..77921.44 rows=2399 width=123)
                                   Workers Planned: 2
                                   ->  Hash Join  (cost=5.64..76681.54 rows=1000 width=123)
                                         Hash Cond: (f0_10.s_nationkey = f0_11.n_nationkey)
                                         ->  Nested Loop  (cost=4.07..76666.91 rows=1000 width=127)
                                               ->  Hash Join  (cost=3.79..76364.23 rows=1000 width=127)
                                                     Hash Cond: (f0_12.c_nationkey = f0_13.n_nationkey)
                                                     ->  Nested Loop  (cost=1.28..76332.98 rows=4999 width=36)
                                                           ->  Nested Loop  (cost=0.86..73960.80 rows=4999 width=36)
                                                                 ->  Nested Loop  (cost=0.43..66139.42 rows=16578 width=32)
                                                                       ->  Parallel Seq Scan on part f0_17  (cost=0.00..5116.67 rows=552 width=8)
                                                                             Filter: ((p_type)::text = 'ECONOMY ANODIZED STEEL'::text)
                                                                       ->  Index Scan using fkey_4 on lineitem f0_16  (cost=0.43..110.24 rows=31 width=40)
                                                                             Index Cond: (l_partkey = f0_17.p_partkey)
                                                                 ->  Index Scan using orders_pkey on orders f0_15  (cost=0.43..0.47 rows=1 width=20)
                                                                       Index Cond: (o_orderkey = f0_16.l_orderkey)
                                                                       Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate < '1996-12-31'::date))
                                                           ->  Index Scan using customer_pkey on customer f0_12  (cost=0.42..0.47 rows=1 width=16)
                                                                 Index Cond: (c_custkey = f0_15.o_custkey)
                                                     ->  Hash  (cost=2.45..2.45 rows=5 width=99)
                                                           ->  Hash Join  (cost=1.07..2.45 rows=5 width=99)
                                                                 Hash Cond: (f0_13.n_regionkey = f0_14.r_regionkey)
                                                                 ->  Seq Scan on nation f0_13  (cost=0.00..1.25 rows=25 width=99)
                                                                 ->  Hash  (cost=1.06..1.06 rows=1 width=8)
                                                                       ->  Seq Scan on region f0_14  (cost=0.00..1.06 rows=1 width=8)
                                                                             Filter: ((r_name)::text = 'AMERICA'::text)
                                               ->  Index Scan using supplier_pkey on supplier f0_10  (cost=0.29..0.30 rows=1 width=16)
                                                     Index Cond: (s_suppkey = f0_16.l_suppkey)
                                         ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                               ->  Seq Scan on nation f0_11  (cost=0.00..1.25 rows=25 width=16)
   CTE _temp_view_1
     ->  Unique  (cost=78056.12..78080.11 rows=2399 width=24)
           ->  Sort  (cost=78056.12..78062.12 rows=2399 width=24)
                 Sort Key: (date_part('YEAR'::text, (f0_23.o_orderdate)::timestamp without time zone)), ((f0_24.l_extendedprice * ('1'::double precision - f0_24.l_discount))), f0_19.n_name
                 ->  Gather  (cost=1005.64..77921.44 rows=2399 width=24)
                       Workers Planned: 2
                       ->  Hash Join  (cost=5.64..76681.54 rows=1000 width=24)
                             Hash Cond: (f0_18.s_nationkey = f0_19.n_nationkey)
                             ->  Nested Loop  (cost=4.07..76666.91 rows=1000 width=28)
                                   ->  Hash Join  (cost=3.79..76364.23 rows=1000 width=28)
                                         Hash Cond: (f0_20.c_nationkey = f0_21.n_nationkey)
                                         ->  Nested Loop  (cost=1.28..76332.98 rows=4999 width=36)
                                               ->  Nested Loop  (cost=0.86..73960.80 rows=4999 width=36)
                                                     ->  Nested Loop  (cost=0.43..66139.42 rows=16578 width=32)
                                                           ->  Parallel Seq Scan on part f0_25  (cost=0.00..5116.67 rows=552 width=8)
                                                                 Filter: ((p_type)::text = 'ECONOMY ANODIZED STEEL'::text)
                                                           ->  Index Scan using fkey_4 on lineitem f0_24  (cost=0.43..110.24 rows=31 width=40)
                                                                 Index Cond: (l_partkey = f0_25.p_partkey)
                                                     ->  Index Scan using orders_pkey on orders f0_23  (cost=0.43..0.47 rows=1 width=20)
                                                           Index Cond: (o_orderkey = f0_24.l_orderkey)
                                                           Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate < '1996-12-31'::date))
                                               ->  Index Scan using customer_pkey on customer f0_20  (cost=0.42..0.47 rows=1 width=16)
                                                     Index Cond: (c_custkey = f0_23.o_custkey)
                                         ->  Hash  (cost=2.45..2.45 rows=5 width=8)
                                               ->  Hash Join  (cost=1.07..2.45 rows=5 width=8)
                                                     Hash Cond: (f0_21.n_regionkey = f0_22.r_regionkey)
                                                     ->  Seq Scan on nation f0_21  (cost=0.00..1.25 rows=25 width=16)
                                                     ->  Hash  (cost=1.06..1.06 rows=1 width=8)
                                                           ->  Seq Scan on region f0_22  (cost=0.00..1.06 rows=1 width=8)
                                                                 Filter: ((r_name)::text = 'AMERICA'::text)
                                   ->  Index Scan using supplier_pkey on supplier f0_18  (cost=0.29..0.30 rows=1 width=16)
                                         Index Cond: (s_suppkey = f0_24.l_suppkey)
                             ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                   ->  Seq Scan on nation f0_19  (cost=0.00..1.25 rows=25 width=16)
   CTE _temp_view_4
     ->  HashAggregate  (cost=71.97..73.97 rows=200 width=24)
           Group Key: _temp_view_1_2."A0"
           ->  CTE Scan on _temp_view_1 _temp_view_1_2  (cost=0.00..47.98 rows=2399 width=84)
   CTE _temp_view_3
     ->  CTE Scan on _temp_view_4  (cost=0.00..4.00 rows=200 width=24)
   CTE _temp_view_2
     ->  HashAggregate  (cost=7.00..9.50 rows=200 width=40)
           Group Key: _temp_view_3.year, _temp_view_3.x, _temp_view_3.y, _temp_view_3.year, (_temp_view_3.x / _temp_view_3.y)
           ->  CTE Scan on _temp_view_3  (cost=0.00..4.50 rows=200 width=40)
   ->  Sort  (cost=148.32..148.32 rows=2 width=406)
         Sort Key: _temp_view_0."A0", _temp_view_0."A1", _temp_view_0."A2", _temp_view_0."A3"
         ->  Append  (cost=73.64..148.31 rows=2 width=406)
               ->  Unique  (cost=73.64..73.66 rows=1 width=406)
                     ->  Sort  (cost=73.64..73.65 rows=1 width=406)
                           Sort Key: _temp_view_0."A0", _temp_view_0."A1", _temp_view_0."A2", _temp_view_0."A3"
                           ->  Nested Loop  (cost=1.02..73.63 rows=1 width=406)
                                 Join Filter: (((_temp_view_1."A2")::text = (_temp_view_0."A1")::text) AND (_temp_view_1."A0" = _temp_view_0."A4") AND (_temp_view_1."A1" = _temp_view_0."A5"))
                                 ->  Nested Loop  (cost=1.02..62.80 rows=1 width=108)
                                       Join Filter: ((_temp_view_1."A0" = _temp_view_2."A0") AND (f0."A1" = _temp_view_2."A4"))
                                       ->  CTE Scan on _temp_view_2  (cost=0.00..4.50 rows=1 width=24)
                                             Filter: ("A0" = "A3")
                                       ->  Hash Join  (cost=1.02..58.12 rows=12 width=100)
                                             Hash Cond: (_temp_view_1."A0" = f0."A0")
                                             ->  CTE Scan on _temp_view_1  (cost=0.00..47.98 rows=2399 width=84)
                                             ->  Hash  (cost=1.01..1.01 rows=1 width=16)
                                                   ->  Seq Scan on rtpcq08 f0  (cost=0.00..1.01 rows=1 width=16)
                                 ->  CTE Scan on _temp_view_0  (cost=0.00..10.80 rows=2 width=490)
                                       Filter: (("A1")::text = ("A6")::text)
               ->  Unique  (cost=74.61..74.62 rows=1 width=406)
                     ->  Sort  (cost=74.61..74.61 rows=1 width=406)
                           Sort Key: _temp_view_0_1."A0", _temp_view_0_1."A1", _temp_view_0_1."A2", _temp_view_0_1."A3"
                           ->  Nested Loop  (cost=5.54..74.60 rows=1 width=406)
                                 Join Filter: ((_temp_view_0_1."A4" = _temp_view_1_1."A0") AND (_temp_view_0_1."A5" = _temp_view_1_1."A1") AND ((_temp_view_0_1."A6")::text = (_temp_view_1_1."A2")::text) AND (_temp_view_2_1."A4" = f0_1."A1"))
                                 ->  Hash Join  (cost=1.02..58.12 rows=12 width=100)
                                       Hash Cond: (_temp_view_1_1."A0" = f0_1."A0")
                                       ->  CTE Scan on _temp_view_1 _temp_view_1_1  (cost=0.00..47.98 rows=2399 width=84)
                                       ->  Hash  (cost=1.01..1.01 rows=1 width=16)
                                             ->  Seq Scan on rtpcq08 f0_1  (cost=0.00..1.01 rows=1 width=16)
                                 ->  Materialize  (cost=4.51..15.94 rows=2 width=514)
                                       ->  Hash Join  (cost=4.51..15.93 rows=2 width=514)
                                             Hash Cond: (_temp_view_0_1."A4" = _temp_view_2_1."A0")
                                             ->  CTE Scan on _temp_view_0 _temp_view_0_1  (cost=0.00..9.60 rows=480 width=490)
                                             ->  Hash  (cost=4.50..4.50 rows=1 width=24)
                                                   ->  CTE Scan on _temp_view_2 _temp_view_2_1  (cost=0.00..4.50 rows=1 width=24)
                                                         Filter: ("A0" = "A3")
(153 rows)

Time: 22.296 ms