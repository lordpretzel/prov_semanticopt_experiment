Timing is on.
                                                                                                               QUERY PLAN                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=7844.18..7844.21 rows=1 width=125)
   CTE _temp_view_0
     ->  Unique  (cost=0.06..0.07 rows=2 width=32)
           ->  Sort  (cost=0.06..0.07 rows=2 width=32)
                 Sort Key: ('AIR'::text)
                 ->  Append  (cost=0.00..0.05 rows=2 width=32)
                       ->  Result  (cost=0.00..0.01 rows=1 width=32)
                       ->  Result  (cost=0.00..0.01 rows=1 width=32)
   CTE _temp_view_1
     ->  HashAggregate  (cost=0.10..0.13 rows=3 width=12)
           Group Key: (1), (1), (11)
           ->  Append  (cost=0.00..0.07 rows=3 width=12)
                 ->  Result  (cost=0.00..0.01 rows=1 width=12)
                 ->  Result  (cost=0.00..0.01 rows=1 width=12)
                 ->  Result  (cost=0.00..0.01 rows=1 width=12)
   CTE _temp_view_2
     ->  HashAggregate  (cost=0.36..0.48 rows=12 width=36)
           Group Key: (1), ('SM CASE'::text)
           ->  Append  (cost=0.00..0.30 rows=12 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
   CTE _temp_view_3
     ->  HashAggregate  (cost=0.09..0.12 rows=3 width=8)
           Group Key: (1), (5)
           ->  Append  (cost=0.00..0.07 rows=3 width=8)
                 ->  Result  (cost=0.00..0.01 rows=1 width=8)
                 ->  Result  (cost=0.00..0.01 rows=1 width=8)
                 ->  Result  (cost=0.00..0.01 rows=1 width=8)
   CTE _temp_view_4
     ->  HashAggregate  (cost=0.09..0.12 rows=3 width=36)
           Group Key: (1), ('Brand#12'::text)
           ->  Append  (cost=0.00..0.07 rows=3 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
   ->  Sort  (cost=7843.26..7843.27 rows=1 width=125)
         Sort Key: f0.l_partkey, f0_1.p_name, f0_1.p_mfgr, f0_1.p_brand, f0_1.p_type, f0_1.p_size, f0_1.p_container, f0_1.p_retailprice, f0_1.p_comment
         ->  Nested Loop  (cost=1.84..7843.25 rows=1 width=125)
               ->  Nested Loop  (cost=1.84..7842.23 rows=1 width=125)
                     Join Filter: ((f0_2.l_shipmode)::text = _temp_view_0_1.c0)
                     ->  Nested Loop  (cost=1.84..7842.17 rows=1 width=130)
                           Join Filter: ((_temp_view_2_1.c1 = (f0_3.p_container)::text) AND (_temp_view_4_1.c1 = (f0_3.p_brand)::text) AND (f0_3.p_size <= (_temp_view_3_1.c1)::bigint))
                           ->  Nested Loop  (cost=1.42..7841.69 rows=1 width=206)
                                 Join Filter: (_temp_view_1_1.c0 = _temp_view_4_1.c0)
                                 ->  Nested Loop  (cost=1.42..7841.60 rows=1 width=186)
                                       Join Filter: (_temp_view_1_1.c0 = _temp_view_3_1.c0)
                                       ->  Nested Loop  (cost=1.42..7841.50 rows=1 width=178)
                                             Join Filter: (_temp_view_1_1.c0 = _temp_view_2_1.c0)
                                             ->  Nested Loop  (cost=1.42..7841.11 rows=1 width=142)
                                                   Join Filter: ((f0_2.l_quantity >= (_temp_view_1_1.c1)::double precision) AND (f0_2.l_quantity >= (_temp_view_1_1.c2)::double precision))
                                                   ->  Nested Loop  (cost=1.42..7840.99 rows=1 width=146)
                                                         ->  Nested Loop  (cost=0.99..7799.19 rows=49 width=157)
                                                               Join Filter: ((_temp_view_2.c0 = _temp_view_1.c0) AND (f0.l_quantity >= (_temp_view_1.c1)::double precision) AND (f0.l_quantity >= (_temp_view_1.c2)::double precision))
                                                               ->  CTE Scan on _temp_view_1  (cost=0.00..0.06 rows=3 width=12)
                                                               ->  Materialize  (cost=0.99..7791.23 rows=109 width=177)
                                                                     ->  Nested Loop  (cost=0.99..7790.69 rows=109 width=177)
                                                                           Join Filter: ((f0.l_shipmode)::text = _temp_view_0.c0)
                                                                           ->  CTE Scan on _temp_view_0  (cost=0.00..0.04 rows=2 width=32)
                                                                           ->  Materialize  (cost=0.99..7780.14 rows=382 width=182)
                                                                                 ->  Nested Loop  (cost=0.99..7778.23 rows=382 width=182)
                                                                                       ->  Hash Join  (cost=0.56..7588.56 rows=50 width=137)
                                                                                             Hash Cond: ((_temp_view_2.c0 = _temp_view_4.c0) AND ((f0_1.p_brand)::text = _temp_view_4.c1))
                                                                                             ->  Hash Join  (cost=0.45..7550.45 rows=5000 width=133)
                                                                                                   Hash Cond: ((f0_1.p_container)::text = _temp_view_2.c1)
                                                                                                   Join Filter: (f0_1.p_size <= (_temp_view_3.c1)::bigint)
                                                                                                   ->  Seq Scan on part f0_1  (cost=0.00..6575.00 rows=200000 width=125)
                                                                                                         Filter: (p_size >= '1'::bigint)
                                                                                                   ->  Hash  (cost=0.41..0.41 rows=3 width=44)
                                                                                                         ->  Hash Join  (cost=0.10..0.41 rows=3 width=44)
                                                                                                               Hash Cond: (_temp_view_2.c0 = _temp_view_3.c0)
                                                                                                               ->  CTE Scan on _temp_view_2  (cost=0.00..0.24 rows=12 width=36)
                                                                                                               ->  Hash  (cost=0.06..0.06 rows=3 width=8)
                                                                                                                     ->  CTE Scan on _temp_view_3  (cost=0.00..0.06 rows=3 width=8)
                                                                                             ->  Hash  (cost=0.06..0.06 rows=3 width=36)
                                                                                                   ->  CTE Scan on _temp_view_4  (cost=0.00..0.06 rows=3 width=36)
                                                                                       ->  Index Scan using fkey_4 on lineitem f0  (cost=0.43..3.71 rows=8 width=53)
                                                                                             Index Cond: (l_partkey = f0_1.p_partkey)
                                                                                             Filter: ((l_shipinstruct)::text = 'DELIVER IN PERSON'::text)
                                                         ->  Index Scan using lineitem_pkey on lineitem f0_2  (cost=0.43..0.84 rows=1 width=53)
                                                               Index Cond: ((l_orderkey = f0.l_orderkey) AND (l_linenumber = f0.l_linenumber))
                                                               Filter: (((l_shipinstruct)::text = 'DELIVER IN PERSON'::text) AND (f0.l_extendedprice = l_extendedprice) AND (f0.l_discount = l_discount))
                                                   ->  CTE Scan on _temp_view_1 _temp_view_1_1  (cost=0.00..0.06 rows=3 width=12)
                                             ->  CTE Scan on _temp_view_2 _temp_view_2_1  (cost=0.00..0.24 rows=12 width=36)
                                       ->  CTE Scan on _temp_view_3 _temp_view_3_1  (cost=0.00..0.06 rows=3 width=8)
                                 ->  CTE Scan on _temp_view_4 _temp_view_4_1  (cost=0.00..0.06 rows=3 width=36)
                           ->  Index Scan using part_pkey on part f0_3  (cost=0.42..0.45 rows=1 width=33)
                                 Index Cond: (p_partkey = f0_2.l_partkey)
                                 Filter: (p_size >= '1'::bigint)
                     ->  CTE Scan on _temp_view_0 _temp_view_0_1  (cost=0.00..0.04 rows=2 width=32)
               ->  Seq Scan on rtpcq19 f0_4  (cost=0.00..1.01 rows=1 width=0)
(100 rows)

Time: 33.432 ms