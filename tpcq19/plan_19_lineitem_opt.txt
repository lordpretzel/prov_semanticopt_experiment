Timing is on.
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=6634.26..6634.30 rows=1 width=144)
   ->  Sort  (cost=6634.26..6634.26 rows=1 width=144)
         Sort Key: f0.l_orderkey, f0.l_partkey, f0.l_suppkey, f0.l_linenumber, f0.l_quantity, f0.l_extendedprice, f0.l_discount, f0.l_tax, f0.l_returnflag, f0.l_linestatus, f0.l_shipdate, f0.l_commitdate, f0.l_receiptdate, f0.l_shipmode, f0.l_comment
         ->  Gather  (cost=1002.27..6634.25 rows=1 width=144)
               Workers Planned: 2
               ->  Nested Loop  (cost=2.27..5634.15 rows=1 width=144)
                     ->  Nested Loop  (cost=2.27..5633.13 rows=1 width=112)
                           ->  Hash Join  (cost=1.84..5616.07 rows=20 width=32)
                                 Hash Cond: ((1) = (1))
                                 Join Filter: ((f0_1.l_quantity >= ((1))::double precision) AND (f0_1.l_quantity >= ((11))::double precision))
                                 ->  Hash Join  (cost=1.64..5615.48 rows=45 width=52)
                                       Hash Cond: ((f0_1.l_shipmode)::text = ('AIR'::text))
                                       ->  Nested Loop  (cost=1.53..5614.70 rows=159 width=57)
                                             ->  Hash Join  (cost=1.09..5535.03 rows=21 width=20)
                                                   Hash Cond: (((1) = (1)) AND ((f0_2.p_brand)::text = ('Brand#12'::text)))
                                                   ->  Hash Join  (cost=0.90..5523.82 rows=2083 width=25)
                                                         Hash Cond: ((f0_2.p_container)::text = ('SM CASE'::text))
                                                         Join Filter: (f0_2.p_size <= ((5))::bigint)
                                                         ->  Parallel Seq Scan on part f0_2  (cost=0.00..5116.67 rows=83333 width=33)
                                                               Filter: (p_size >= '1'::bigint)
                                                         ->  Hash  (cost=0.86..0.86 rows=3 width=44)
                                                               ->  Hash Join  (cost=0.55..0.86 rows=3 width=44)
                                                                     Hash Cond: ((1) = (1))
                                                                     ->  HashAggregate  (cost=0.36..0.48 rows=12 width=36)
                                                                           Group Key: (1), ('SM CASE'::text)
                                                                           ->  Append  (cost=0.00..0.30 rows=12 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                                 ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                     ->  Hash  (cost=0.15..0.15 rows=3 width=8)
                                                                           ->  HashAggregate  (cost=0.09..0.12 rows=3 width=8)
                                                                                 Group Key: (1), (5)
                                                                                 ->  Append  (cost=0.00..0.07 rows=3 width=8)
                                                                                       ->  Result  (cost=0.00..0.01 rows=1 width=8)
                                                                                       ->  Result  (cost=0.00..0.01 rows=1 width=8)
                                                                                       ->  Result  (cost=0.00..0.01 rows=1 width=8)
                                                   ->  Hash  (cost=0.15..0.15 rows=3 width=36)
                                                         ->  HashAggregate  (cost=0.09..0.12 rows=3 width=36)
                                                               Group Key: (1), ('Brand#12'::text)
                                                               ->  Append  (cost=0.00..0.07 rows=3 width=36)
                                                                     ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                     ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                                     ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                             ->  Index Scan using fkey_4 on lineitem f0_1  (cost=0.43..3.71 rows=8 width=53)
                                                   Index Cond: (l_partkey = f0_2.p_partkey)
                                                   Filter: ((l_shipinstruct)::text = 'DELIVER IN PERSON'::text)
                                       ->  Hash  (cost=0.09..0.09 rows=2 width=32)
                                             ->  Unique  (cost=0.06..0.07 rows=2 width=32)
                                                   ->  Sort  (cost=0.06..0.07 rows=2 width=32)
                                                         Sort Key: ('AIR'::text)
                                                         ->  Append  (cost=0.00..0.05 rows=2 width=32)
                                                               ->  Result  (cost=0.00..0.01 rows=1 width=32)
                                                               ->  Result  (cost=0.00..0.01 rows=1 width=32)
                                 ->  Hash  (cost=0.16..0.16 rows=3 width=12)
                                       ->  HashAggregate  (cost=0.10..0.13 rows=3 width=12)
                                             Group Key: (1), (1), (11)
                                             ->  Append  (cost=0.00..0.07 rows=3 width=12)
                                                   ->  Result  (cost=0.00..0.01 rows=1 width=12)
                                                   ->  Result  (cost=0.00..0.01 rows=1 width=12)
                                                   ->  Result  (cost=0.00..0.01 rows=1 width=12)
                           ->  Index Scan using lineitem_pkey on lineitem f0  (cost=0.43..0.84 rows=1 width=112)
                                 Index Cond: ((l_orderkey = f0_1.l_orderkey) AND (l_linenumber = f0_1.l_linenumber))
                                 Filter: (((l_shipinstruct)::text = 'DELIVER IN PERSON'::text) AND (f0_1.l_extendedprice = l_extendedprice) AND (f0_1.l_discount = l_discount))
                     ->  Seq Scan on rtpcq19 f0_3  (cost=0.00..1.01 rows=1 width=0)
(73 rows)

Time: 20.883 ms