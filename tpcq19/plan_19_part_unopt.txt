Timing is on.
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=9306.80..9306.82 rows=1 width=125)
   CTE _temp_view_0
     ->  Unique  (cost=0.06..0.07 rows=2 width=32)
           ->  Sort  (cost=0.06..0.07 rows=2 width=32)
                 Sort Key: ('AIR'::text)
                 ->  Append  (cost=0.00..0.05 rows=2 width=32)
                       ->  Result  (cost=0.00..0.01 rows=1 width=32)
                       ->  Result  (cost=0.00..0.01 rows=1 width=32)
   CTE _temp_view_1
     ->  Unique  (cost=1.28..1.32 rows=3 width=76)
           ->  Sort  (cost=1.28..1.28 rows=3 width=76)
                 Sort Key: (1), (11), ('SM CASE'::text), f0_5.c1, ('Brand#12'::text)
                 ->  Merge Join  (cost=1.08..1.25 rows=3 width=76)
                       Merge Cond: ((1) = (1))
                       ->  Unique  (cost=0.10..0.13 rows=3 width=12)
                             ->  Sort  (cost=0.10..0.11 rows=3 width=12)
                                   Sort Key: (1), (1), (11)
                                   ->  Append  (cost=0.00..0.07 rows=3 width=12)
                                         ->  Result  (cost=0.00..0.01 rows=1 width=12)
                                         ->  Result  (cost=0.00..0.01 rows=1 width=12)
                                         ->  Result  (cost=0.00..0.01 rows=1 width=12)
                       ->  Materialize  (cost=0.99..1.07 rows=1 width=80)
                             ->  Merge Join  (cost=0.99..1.07 rows=1 width=80)
                                   Merge Cond: ((1) = (1))
                                   ->  Unique  (cost=0.10..0.12 rows=3 width=36)
                                         ->  Sort  (cost=0.10..0.11 rows=3 width=36)
                                               Sort Key: (1), ('Brand#12'::text)
                                               ->  Append  (cost=0.00..0.07 rows=3 width=36)
                                                     ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                     ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                     ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                   ->  Sort  (cost=0.89..0.89 rows=3 width=44)
                                         Sort Key: (1)
                                         ->  Hash Join  (cost=0.55..0.86 rows=3 width=44)
                                               Hash Cond: ((1) = f0_5.c0)
                                               ->  HashAggregate  (cost=0.36..0.48 rows=12 width=36)
                                                     Group Key: (1), ('SM CASE'::text)
                                                     ->  Append  (cost=0.00..0.30 rows=12 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                                           ->  Result  (cost=0.00..0.01 rows=1 width=36)
                                               ->  Hash  (cost=0.15..0.15 rows=3 width=8)
                                                     ->  Subquery Scan on f0_5  (cost=0.09..0.15 rows=3 width=8)
                                                           ->  HashAggregate  (cost=0.09..0.12 rows=3 width=8)
                                                                 Group Key: (1), (5)
                                                                 ->  Append  (cost=0.00..0.07 rows=3 width=8)
                                                                       ->  Result  (cost=0.00..0.01 rows=1 width=8)
                                                                       ->  Result  (cost=0.00..0.01 rows=1 width=8)
                                                                       ->  Result  (cost=0.00..0.01 rows=1 width=8)
   CTE _temp_view_4
     ->  Seq Scan on rtpcq19 f0_6  (cost=0.00..1.01 rows=1 width=8)
   ->  Sort  (cost=9304.40..9304.40 rows=1 width=125)
         Sort Key: f0.l_partkey, f0_1.p_name, f0_1.p_mfgr, f0_1.p_brand, f0_1.p_type, f0_1.p_size, f0_1.p_container, f0_1.p_retailprice, f0_1.p_comment
         ->  Hash Join  (cost=8866.73..9304.39 rows=1 width=125)
               Hash Cond: (((f0_1.p_container)::text = _temp_view_1."A2") AND ((f0_1.p_brand)::text = _temp_view_1."A4"))
               Join Filter: ((f0.l_quantity >= (_temp_view_1."A0")::double precision) AND (f0.l_quantity >= (_temp_view_1."A1")::double precision) AND (f0_1.p_size <= (_temp_view_1."A3")::bigint))
               ->  Nested Loop  (cost=8866.62..9304.25 rows=1 width=133)
                     Join Filter: ((f0.l_shipmode)::text = _temp_view_0.c0)
                     ->  Nested Loop  (cost=8866.62..9304.18 rows=1 width=138)
                           ->  Nested Loop  (cost=8866.20..9303.73 rows=1 width=21)
                                 ->  Unique  (cost=8865.77..8868.00 rows=49 width=32)
                                       ->  Nested Loop  (cost=8865.77..8867.51 rows=49 width=32)
                                             ->  Unique  (cost=8865.75..8866.36 rows=49 width=32)
                                                   ->  Sort  (cost=8865.75..8865.87 rows=49 width=32)
                                                         Sort Key: f0_3.l_orderkey, f0_3.l_linenumber, f0_3.l_discount, f0_3.l_extendedprice
                                                         ->  Nested Loop  (cost=0.54..8864.37 rows=49 width=32)
                                                               Join Filter: ((f0_3.l_shipmode)::text = _temp_view_0_1.c0)
                                                               ->  CTE Scan on _temp_view_0 _temp_view_0_1  (cost=0.00..0.04 rows=2 width=32)
                                                               ->  Materialize  (cost=0.54..8859.66 rows=170 width=37)
                                                                     ->  Nested Loop  (cost=0.54..8858.81 rows=170 width=37)
                                                                           Join Filter: ((f0_3.l_quantity >= (_temp_view_1_1."A0")::double precision) AND (f0_3.l_quantity >= (_temp_view_1_1."A1")::double precision))
                                                                           ->  Hash Join  (cost=0.10..8084.10 rows=200 width=16)
                                                                                 Hash Cond: (((f0_4.p_container)::text = _temp_view_1_1."A2") AND ((f0_4.p_brand)::text = _temp_view_1_1."A4"))
                                                                                 Join Filter: (f0_4.p_size <= (_temp_view_1_1."A3")::bigint)
                                                                                 ->  Seq Scan on part f0_4  (cost=0.00..6575.00 rows=200000 width=33)
                                                                                       Filter: (p_size >= '1'::bigint)
                                                                                 ->  Hash  (cost=0.06..0.06 rows=3 width=76)
                                                                                       ->  CTE Scan on _temp_view_1 _temp_view_1_1  (cost=0.00..0.06 rows=3 width=76)
                                                                           ->  Index Scan using fkey_4 on lineitem f0_3  (cost=0.43..3.71 rows=8 width=53)
                                                                                 Index Cond: (l_partkey = f0_4.p_partkey)
                                                                                 Filter: ((l_shipinstruct)::text = 'DELIVER IN PERSON'::text)
                                             ->  Materialize  (cost=0.02..0.05 rows=1 width=0)
                                                   ->  Subquery Scan on f0_2  (cost=0.02..0.04 rows=1 width=0)
                                                         ->  HashAggregate  (cost=0.02..0.03 rows=1 width=8)
                                                               Group Key: _temp_view_4.x1
                                                               ->  CTE Scan on _temp_view_4  (cost=0.00..0.02 rows=1 width=8)
                                 ->  Index Scan using fkey_2 on lineitem f0  (cost=0.43..8.87 rows=1 width=53)
                                       Index Cond: (l_orderkey = f0_3.l_orderkey)
                                       Filter: (((l_shipinstruct)::text = 'DELIVER IN PERSON'::text) AND (f0_3.l_linenumber = l_linenumber) AND (f0_3.l_discount = l_discount) AND (f0_3.l_extendedprice = l_extendedprice))
                           ->  Index Scan using part_pkey on part f0_1  (cost=0.42..0.45 rows=1 width=125)
                                 Index Cond: (p_partkey = f0.l_partkey)
                                 Filter: (p_size >= '1'::bigint)
                     ->  CTE Scan on _temp_view_0  (cost=0.00..0.04 rows=2 width=32)
               ->  Hash  (cost=0.06..0.06 rows=3 width=76)
                     ->  CTE Scan on _temp_view_1  (cost=0.00..0.06 rows=3 width=76)
(104 rows)

Time: 10.709 ms