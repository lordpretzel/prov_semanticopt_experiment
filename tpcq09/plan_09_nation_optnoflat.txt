Timing is on.
                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=76079.86..76079.87 rows=1 width=99)
   CTE _temp_view_0
     ->  Seq Scan on rtpcq09 f0_13  (cost=0.00..1.01 rows=1 width=24)
   ->  Sort  (cost=76078.85..76078.85 rows=1 width=99)
         Sort Key: f0.n_nationkey, f0.n_name, f0.n_regionkey, f0.n_comment
         ->  Hash Join  (cost=73480.14..76078.84 rows=1 width=99)
               Hash Cond: (((f0.n_name)::text = (f0_11.n_name)::text) AND ((date_part('year'::text, (f0_4.o_orderdate)::timestamp without time zone)) = (date_part('year'::text, (f0_12.o_orderdate)::timestamp without time zone))) AND ((((f0_2.l_extendedprice * ('1'::double precision - f0_2.l_discount)) - (f0_3.ps_supplycost * f0_2.l_quantity))) = (((f0_9.l_extendedprice * ('1'::double precision - f0_9.l_discount)) - (f0_10.ps_supplycost * f0_9.l_quantity)))))
               ->  HashAggregate  (cost=35750.85..37266.12 rows=60611 width=123)
                     Group Key: f0.n_nationkey, f0.n_name, f0.n_regionkey, f0.n_comment, f0.n_name, (date_part('year'::text, (f0_4.o_orderdate)::timestamp without time zone)), (((f0_2.l_extendedprice * ('1'::double precision - f0_2.l_discount)) - (f0_3.ps_supplycost * f0_2.l_quantity)))
                     ->  Gather  (cost=1454.85..34690.16 rows=60611 width=123)
                           Workers Planned: 2
                           ->  Nested Loop  (cost=454.85..27629.06 rows=25255 width=123)
                                 ->  Nested Loop  (cost=454.42..15461.38 rows=25255 width=139)
                                       Join Filter: (f0_1.s_suppkey = f0_2.l_suppkey)
                                       ->  Hash Join  (cost=453.99..11543.81 rows=3367 width=139)
                                             Hash Cond: (f0_1.s_nationkey = f0.n_nationkey)
                                             ->  Hash Join  (cost=452.43..11531.91 rows=3367 width=48)
                                                   Hash Cond: (f0_3.ps_suppkey = f0_1.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..11071.07 rows=3367 width=32)
                                                         ->  Parallel Seq Scan on part f0_5  (cost=0.00..5116.67 rows=842 width=8)
                                                               Filter: ((p_name)::text ~~ '%green%'::text)
                                                         ->  Index Scan using fkey_8 on partsupp f0_3  (cost=0.42..7.03 rows=4 width=24)
                                                               Index Cond: (ps_partkey = f0_5.p_partkey)
                                                   ->  Hash  (cost=327.00..327.00 rows=10000 width=16)
                                                         ->  Seq Scan on supplier f0_1  (cost=0.00..327.00 rows=10000 width=16)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=99)
                                                   ->  Seq Scan on nation f0  (cost=0.00..1.25 rows=25 width=99)
                                                         Filter: ((n_name)::text IS NOT NULL)
                                       ->  Index Scan using fkey_3 on lineitem f0_2  (cost=0.43..1.15 rows=1 width=48)
                                             Index Cond: ((l_partkey = f0_3.ps_partkey) AND (l_suppkey = f0_3.ps_suppkey))
                                 ->  Index Scan using orders_pkey on orders f0_4  (cost=0.43..0.47 rows=1 width=12)
                                       Index Cond: (o_orderkey = f0_2.l_orderkey)
               ->  Hash  (cost=37729.26..37729.26 rows=2 width=24)
                     ->  Unique  (cost=37729.22..37729.24 rows=2 width=24)
                           ->  Sort  (cost=37729.22..37729.22 rows=2 width=24)
                                 Sort Key: f0_11.n_name, (date_part('year'::text, (f0_12.o_orderdate)::timestamp without time zone)), (((f0_9.l_extendedprice * ('1'::double precision - f0_9.l_discount)) - (f0_10.ps_supplycost * f0_9.l_quantity)))
                                 ->  Hash Join  (cost=35153.22..37729.21 rows=2 width=24)
                                       Hash Cond: (((f0_11.n_name)::text = (f0_6."A0")::text) AND ((date_part('year'::text, (f0_12.o_orderdate)::timestamp without time zone)) = f0_6."A1"))
                                       ->  HashAggregate  (cost=35153.16..36668.43 rows=60611 width=24)
                                             Group Key: f0_11.n_name, (date_part('year'::text, (f0_12.o_orderdate)::timestamp without time zone)), (((f0_9.l_extendedprice * ('1'::double precision - f0_9.l_discount)) - (f0_10.ps_supplycost * f0_9.l_quantity)))
                                             ->  Gather  (cost=1454.85..34698.57 rows=60611 width=24)
                                                   Workers Planned: 2
                                                   ->  Nested Loop  (cost=454.85..27637.47 rows=25255 width=24)
                                                         ->  Nested Loop  (cost=454.42..15469.80 rows=25255 width=48)
                                                               Join Filter: ((f0_7.p_partkey = f0_9.l_partkey) AND (f0_8.s_suppkey = f0_9.l_suppkey))
                                                               ->  Hash Join  (cost=453.99..11543.81 rows=3367 width=48)
                                                                     Hash Cond: (f0_8.s_nationkey = f0_11.n_nationkey)
                                                                     ->  Hash Join  (cost=452.43..11531.91 rows=3367 width=48)
                                                                           Hash Cond: (f0_10.ps_suppkey = f0_8.s_suppkey)
                                                                           ->  Nested Loop  (cost=0.42..11071.07 rows=3367 width=32)
                                                                                 ->  Parallel Seq Scan on part f0_7  (cost=0.00..5116.67 rows=842 width=8)
                                                                                       Filter: ((p_name)::text ~~ '%green%'::text)
                                                                                 ->  Index Scan using fkey_8 on partsupp f0_10  (cost=0.42..7.03 rows=4 width=24)
                                                                                       Index Cond: (ps_partkey = f0_7.p_partkey)
                                                                           ->  Hash  (cost=327.00..327.00 rows=10000 width=16)
                                                                                 ->  Seq Scan on supplier f0_8  (cost=0.00..327.00 rows=10000 width=16)
                                                                     ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                                                           ->  Seq Scan on nation f0_11  (cost=0.00..1.25 rows=25 width=16)
                                                               ->  Index Scan using fkey_3 on lineitem f0_9  (cost=0.43..1.15 rows=1 width=48)
                                                                     Index Cond: ((l_partkey = f0_10.ps_partkey) AND (l_suppkey = f0_10.ps_suppkey))
                                                         ->  Index Scan using orders_pkey on orders f0_12  (cost=0.43..0.47 rows=1 width=12)
                                                               Index Cond: (o_orderkey = f0_9.l_orderkey)
                                       ->  Hash  (cost=0.05..0.05 rows=1 width=76)
                                             ->  Subquery Scan on f0_6  (cost=0.03..0.05 rows=1 width=76)
                                                   ->  HashAggregate  (cost=0.03..0.04 rows=1 width=84)
                                                         Group Key: _temp_view_0.x1, _temp_view_0.x2, _temp_view_0.x3
                                                         ->  CTE Scan on _temp_view_0  (cost=0.00..0.02 rows=1 width=84)
(67 rows)

Time: 20.588 ms