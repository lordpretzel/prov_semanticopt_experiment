Timing is on.
                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=56286.69..56286.71 rows=1 width=147)
   ->  Sort  (cost=56286.69..56286.69 rows=1 width=147)
         Sort Key: f0.s_suppkey, f0.s_name, f0.s_address, f0.s_nationkey, f0.s_phone, f0.s_acctbal, f0.s_comment
         ->  Gather  (cost=29156.48..56286.68 rows=1 width=147)
               Workers Planned: 2
               ->  Parallel Hash Join  (cost=28156.48..55286.58 rows=1 width=147)
                     Hash Cond: (((f0_3.n_name)::text = (f0_10.n_name)::text) AND (f0_12."A1" = date_part('year'::text, (f0_11.o_orderdate)::timestamp without time zone)) AND (((f0_1.l_extendedprice * ('1'::double precision - f0_1.l_discount)) - (f0_2.ps_supplycost * f0_1.l_quantity)) = ((f0_8.l_extendedprice * ('1'::double precision - f0_8.l_discount)) - (f0_9.ps_supplycost * f0_8.l_quantity))))
                     ->  Hash Join  (cost=455.87..27503.86 rows=5 width=207)
                           Hash Cond: (((f0_3.n_name)::text = (f0_12."A0")::text) AND (date_part('year'::text, (f0_4.o_orderdate)::timestamp without time zone) = f0_12."A1"))
                           ->  Nested Loop  (cost=454.85..27250.23 rows=25255 width=191)
                                 ->  Nested Loop  (cost=454.42..15461.38 rows=25255 width=195)
                                       Join Filter: (f0.s_suppkey = f0_1.l_suppkey)
                                       ->  Hash Join  (cost=453.99..11543.81 rows=3367 width=187)
                                             Hash Cond: (f0.s_nationkey = f0_3.n_nationkey)
                                             ->  Hash Join  (cost=452.43..11531.91 rows=3367 width=179)
                                                   Hash Cond: (f0_2.ps_suppkey = f0.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..11071.07 rows=3367 width=32)
                                                         ->  Parallel Seq Scan on part f0_5  (cost=0.00..5116.67 rows=842 width=8)
                                                               Filter: ((p_name)::text ~~ '%green%'::text)
                                                         ->  Index Scan using fkey_8 on partsupp f0_2  (cost=0.42..7.03 rows=4 width=24)
                                                               Index Cond: (ps_partkey = f0_5.p_partkey)
                                                   ->  Hash  (cost=327.00..327.00 rows=10000 width=147)
                                                         ->  Seq Scan on supplier f0  (cost=0.00..327.00 rows=10000 width=147)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                                   ->  Seq Scan on nation f0_3  (cost=0.00..1.25 rows=25 width=16)
                                       ->  Index Scan using fkey_3 on lineitem f0_1  (cost=0.43..1.15 rows=1 width=48)
                                             Index Cond: ((l_partkey = f0_2.ps_partkey) AND (l_suppkey = f0_2.ps_suppkey))
                                 ->  Index Scan using orders_pkey on orders f0_4  (cost=0.43..0.47 rows=1 width=12)
                                       Index Cond: (o_orderkey = f0_1.l_orderkey)
                           ->  Hash  (cost=1.01..1.01 rows=1 width=16)
                                 ->  Seq Scan on rtpcq09 f0_12  (cost=0.00..1.01 rows=1 width=16)
                     ->  Parallel Hash  (cost=27258.65..27258.65 rows=25255 width=44)
                           ->  Nested Loop  (cost=454.85..27258.65 rows=25255 width=44)
                                 ->  Nested Loop  (cost=454.42..15469.80 rows=25255 width=48)
                                       Join Filter: ((f0_6.p_partkey = f0_8.l_partkey) AND (f0_7.s_suppkey = f0_8.l_suppkey))
                                       ->  Hash Join  (cost=453.99..11543.81 rows=3367 width=48)
                                             Hash Cond: (f0_7.s_nationkey = f0_10.n_nationkey)
                                             ->  Hash Join  (cost=452.43..11531.91 rows=3367 width=48)
                                                   Hash Cond: (f0_9.ps_suppkey = f0_7.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..11071.07 rows=3367 width=32)
                                                         ->  Parallel Seq Scan on part f0_6  (cost=0.00..5116.67 rows=842 width=8)
                                                               Filter: ((p_name)::text ~~ '%green%'::text)
                                                         ->  Index Scan using fkey_8 on partsupp f0_9  (cost=0.42..7.03 rows=4 width=24)
                                                               Index Cond: (ps_partkey = f0_6.p_partkey)
                                                   ->  Hash  (cost=327.00..327.00 rows=10000 width=16)
                                                         ->  Seq Scan on supplier f0_7  (cost=0.00..327.00 rows=10000 width=16)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                                   ->  Seq Scan on nation f0_10  (cost=0.00..1.25 rows=25 width=16)
                                       ->  Index Scan using fkey_3 on lineitem f0_8  (cost=0.43..1.15 rows=1 width=48)
                                             Index Cond: ((l_partkey = f0_9.ps_partkey) AND (l_suppkey = f0_9.ps_suppkey))
                                 ->  Index Scan using orders_pkey on orders f0_11  (cost=0.43..0.47 rows=1 width=12)
                                       Index Cond: (o_orderkey = f0_8.l_orderkey)
(52 rows)

Time: 15.321 ms