Timing is on.
                                                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique  (cost=77041.97..77042.00 rows=1 width=112)
   ->  Sort  (cost=77041.97..77041.98 rows=1 width=112)
         Sort Key: f0_7.o_orderkey, f0_7.o_custkey, f0_7.o_orderstatus, f0_7.o_totalprice, f0_7.o_orderdate, f0_7.o_orderpriority, f0_7.o_clerk, f0_7.o_shippriority, f0_7.o_comment
         ->  Hash Join  (cost=74238.69..77041.96 rows=1 width=112)
               Hash Cond: (((f0_5.n_name)::text = (f0_12.n_name)::text) AND ((date_part('year'::text, (f0_6.o_orderdate)::timestamp without time zone)) = (date_part('year'::text, (f0_7.o_orderdate)::timestamp without time zone))) AND ((((f0_3.l_extendedprice * ('1'::double precision - f0_3.l_discount)) - (f0_4.ps_supplycost * f0_3.l_quantity))) = (((f0_8.l_extendedprice * ('1'::double precision - f0_8.l_discount)) - (f0_10.ps_supplycost * f0_8.l_quantity)))))
               ->  HashAggregate  (cost=35153.16..36668.43 rows=60611 width=24)
                     Group Key: f0_5.n_name, (date_part('year'::text, (f0_6.o_orderdate)::timestamp without time zone)), (((f0_3.l_extendedprice * ('1'::double precision - f0_3.l_discount)) - (f0_4.ps_supplycost * f0_3.l_quantity)))
                     ->  Gather  (cost=1454.85..34698.57 rows=60611 width=24)
                           Workers Planned: 2
                           ->  Nested Loop  (cost=454.85..27637.47 rows=25255 width=24)
                                 ->  Nested Loop  (cost=454.42..15469.80 rows=25255 width=48)
                                       Join Filter: ((f0_1.p_partkey = f0_3.l_partkey) AND (f0_2.s_suppkey = f0_3.l_suppkey))
                                       ->  Hash Join  (cost=453.99..11543.81 rows=3367 width=48)
                                             Hash Cond: (f0_2.s_nationkey = f0_5.n_nationkey)
                                             ->  Hash Join  (cost=452.43..11531.91 rows=3367 width=48)
                                                   Hash Cond: (f0_4.ps_suppkey = f0_2.s_suppkey)
                                                   ->  Nested Loop  (cost=0.42..11071.07 rows=3367 width=32)
                                                         ->  Parallel Seq Scan on part f0_1  (cost=0.00..5116.67 rows=842 width=8)
                                                               Filter: ((p_name)::text ~~ '%green%'::text)
                                                         ->  Index Scan using fkey_8 on partsupp f0_4  (cost=0.42..7.03 rows=4 width=24)
                                                               Index Cond: (ps_partkey = f0_1.p_partkey)
                                                   ->  Hash  (cost=327.00..327.00 rows=10000 width=16)
                                                         ->  Seq Scan on supplier f0_2  (cost=0.00..327.00 rows=10000 width=16)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                                   ->  Seq Scan on nation f0_5  (cost=0.00..1.25 rows=25 width=16)
                                       ->  Index Scan using fkey_3 on lineitem f0_3  (cost=0.43..1.15 rows=1 width=48)
                                             Index Cond: ((l_partkey = f0_4.ps_partkey) AND (l_suppkey = f0_4.ps_suppkey))
                                 ->  Index Scan using orders_pkey on orders f0_6  (cost=0.43..0.47 rows=1 width=12)
                                       Index Cond: (o_orderkey = f0_3.l_orderkey)
               ->  Hash  (cost=39085.50..39085.50 rows=2 width=152)
                     ->  Hash Join  (cost=36509.51..39085.50 rows=2 width=152)
                           Hash Cond: (((f0_12.n_name)::text = (f0."A0")::text) AND ((date_part('year'::text, (f0_7.o_orderdate)::timestamp without time zone)) = f0."A1"))
                           ->  HashAggregate  (cost=36508.49..38023.76 rows=60611 width=136)
                                 Group Key: f0_7.o_orderkey, f0_7.o_custkey, f0_7.o_orderstatus, f0_7.o_totalprice, f0_7.o_orderdate, f0_7.o_orderpriority, f0_7.o_clerk, f0_7.o_shippriority, f0_7.o_comment, f0_12.n_name, (date_part('year'::text, (f0_7.o_orderdate)::timestamp without time zone)), (((f0_8.l_extendedprice * ('1'::double precision - f0_8.l_discount)) - (f0_10.ps_supplycost * f0_8.l_quantity)))
                                 ->  Gather  (cost=1454.85..34690.16 rows=60611 width=136)
                                       Workers Planned: 2
                                       ->  Nested Loop  (cost=454.85..27629.06 rows=25255 width=136)
                                             ->  Nested Loop  (cost=454.42..15461.38 rows=25255 width=48)
                                                   Join Filter: (f0_9.p_partkey = f0_8.l_partkey)
                                                   ->  Hash Join  (cost=453.99..11543.81 rows=3367 width=48)
                                                         Hash Cond: (f0_11.s_nationkey = f0_12.n_nationkey)
                                                         ->  Hash Join  (cost=452.43..11531.91 rows=3367 width=48)
                                                               Hash Cond: (f0_10.ps_suppkey = f0_11.s_suppkey)
                                                               ->  Nested Loop  (cost=0.42..11071.07 rows=3367 width=32)
                                                                     ->  Parallel Seq Scan on part f0_9  (cost=0.00..5116.67 rows=842 width=8)
                                                                           Filter: ((p_name)::text ~~ '%green%'::text)
                                                                     ->  Index Scan using fkey_8 on partsupp f0_10  (cost=0.42..7.03 rows=4 width=24)
                                                                           Index Cond: (ps_partkey = f0_9.p_partkey)
                                                               ->  Hash  (cost=327.00..327.00 rows=10000 width=16)
                                                                     ->  Seq Scan on supplier f0_11  (cost=0.00..327.00 rows=10000 width=16)
                                                         ->  Hash  (cost=1.25..1.25 rows=25 width=16)
                                                               ->  Seq Scan on nation f0_12  (cost=0.00..1.25 rows=25 width=16)
                                                   ->  Index Scan using fkey_3 on lineitem f0_8  (cost=0.43..1.15 rows=1 width=48)
                                                         Index Cond: ((l_partkey = f0_10.ps_partkey) AND (l_suppkey = f0_10.ps_suppkey))
                                             ->  Index Scan using orders_pkey on orders f0_7  (cost=0.43..0.47 rows=1 width=112)
                                                   Index Cond: (o_orderkey = f0_8.l_orderkey)
                           ->  Hash  (cost=1.01..1.01 rows=1 width=16)
                                 ->  Seq Scan on rtpcq09 f0  (cost=0.00..1.01 rows=1 width=16)
(58 rows)

Time: 20.654 ms